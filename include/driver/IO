#pragma once

#include <utils>

namespace EXOS::IO {
  static inline void outb(uint16_t port, uint8_t data) {
    ASM("outb %0, %%dx"::"a"(data), "d"(port));
  }

  static inline void outw(uint16_t port, uint16_t data) {
    ASM("outw %0, %%dx"::"a"(data), "d"(port));
  }

  static inline void outl(uint16_t port, uint32_t data) {
    ASM("outl %0, %%dx"::"a"(data), "d"(port));
  }

  static inline uint8_t inb(uint16_t port) {
    uint8_t result = 0;
    ASM("inb %%dx, %0"
        :"=a"(result)
        :"d"(port));
    return result;
  }

  static inline uint16_t inw(uint16_t port) {
    uint16_t result = 0;
    ASM("inw %%dx, %0"
        :"=a"(result)
        :"d"(port));
    return result;
  }

  static inline uint32_t ind(uint16_t port) {
    uint32_t result = 0;
    ASM("inl %%dx, %0"
        :"=a"(result)
        :"d"(port));
    return result;
  }

  namespace MMIO {
    static inline uint8_t inb(uintptr_t address) {
      return *((uint8_t*)address);
    }

    static inline uint16_t inw(uintptr_t address) {
      return *((uint16_t*)address);
    }

    static inline uint32_t ind(uintptr_t address) {
      return *((uint32_t*)address);
    }

    static inline uint64_t inq(uintptr_t address) {
      return *((uint64_t*)address);
    }

    static inline void outb(uintptr_t address, uint8_t value) {
      *((uint8_t*)address) = value;
    }

    static inline void outw(uintptr_t address, uint16_t value) {
      *((uint16_t*)address) = value;
    }

    static inline void outl(uintptr_t address, uint32_t value) {
      *((uint32_t*)address) = value;
    }

    static inline void outq(uintptr_t address, uint64_t value) {
      *((uint64_t*)address) = value;
    }
    
    static inline uint8_t inb(uintptr_t mmioBase, uint64_t offset) {
      return inb(mmioBase + offset);
    }

    static inline uint16_t inw(uintptr_t mmioBase, uint64_t offset) {
      return inw(mmioBase + offset);
    }
    
    static inline uint32_t ind(uintptr_t mmioBase, uint64_t offset) {
      return ind(mmioBase + offset);
    }

    static inline uint64_t inq(uintptr_t mmioBase, uint64_t offset) {
      return inq(mmioBase + offset);
    }

    static inline void outb(uintptr_t mmioBase, uint64_t offset, uint8_t value) {
      outb(mmioBase + offset, value);
    }

    static inline void outw(uintptr_t mmioBase, uint64_t offset, uint16_t value) {
      outw(mmioBase + offset, value);
    }

    static inline void outl(uintptr_t mmioBase, uint64_t offset, uint32_t value) {
      outl(mmioBase + offset, value);
    }

    static inline void outq(uintptr_t mmioBase, uint64_t offset, uint64_t value) {
      outq(mmioBase + offset, value);
    }
  }
}